/* Generated By:JavaCC: Do not edit this line. OsInfoParserTokenManager.java */
package org.ovirt.engine.core.utils.osinfo;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.StringReader;

/** Token Manager. */
public class OsInfoParserTokenManager implements OsInfoParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000002000000L) != 0L)
         {
            jjmatchedKind = 59;
            return 107;
         }
         if ((active0 & 0x7f00003dfbffacL) != 0L)
         {
            jjmatchedKind = 59;
            return 106;
         }
         if ((active0 & 0x50L) != 0L)
         {
            jjmatchedKind = 59;
            return 70;
         }
         if ((active0 & 0x80000000040002L) != 0L)
         {
            jjmatchedKind = 59;
            return 39;
         }
         if ((active0 & 0x300000040000000L) != 0L)
         {
            jjmatchedKind = 59;
            return 19;
         }
         return -1;
      case 1:
         if ((active0 & 0x7fa00005ffffffeL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 1;
            }
            return 106;
         }
         if ((active0 & 0x5000020000000L) != 0L)
            return 106;
         return -1;
      case 2:
         if ((active0 & 0x20000044L) != 0L)
            return 106;
         if ((active0 & 0x7fa00005fffffbaL) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
            return 106;
         }
         return -1;
      case 3:
         if ((active0 & 0x772000007bfffbaL) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
            return 106;
         }
         if ((active0 & 0x8000058400000L) != 0L)
            return 106;
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x7720000053d7fbaL) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
            return 106;
         }
         if ((active0 & 0x2820000L) != 0L)
            return 106;
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x40000001000000L) != 0L)
            return 106;
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x7320000043d7fbaL) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
            return 106;
         }
         return -1;
      case 6:
         if ((active0 & 0x7320000041d199aL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 6;
            }
            return 106;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x6620L) != 0L)
            return 106;
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x4000080L) != 0L)
            return 106;
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x7320000001c111aL) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 7;
            return 106;
         }
         return -1;
      case 8:
         if ((active0 & 0x7320000001c010aL) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 8;
            return 106;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x10L) != 0L)
            return 106;
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x3320000001c010aL) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 9;
            return 106;
         }
         if ((active0 & 0x400000000000000L) != 0L)
            return 106;
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x20200000018010aL) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 10;
            return 106;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x130000000040000L) != 0L)
            return 106;
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x100L) != 0L)
            return 106;
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x20200000018000aL) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 11;
            return 106;
         }
         return -1;
      case 12:
         if ((active0 & 0x20200000008000aL) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 12;
            return 106;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L)
            return 106;
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000L) != 0L)
            return 106;
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x20200000000000aL) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 13;
            return 106;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x2000000000008L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 14;
            return 106;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x200000000000002L) != 0L)
            return 106;
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x2000000000008L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 15;
            return 106;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2000000000008L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 16;
            return 106;
         }
         return -1;
      case 17:
         if ((active0 & 0x2000000000008L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 17;
            return 106;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x2000000000008L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 18;
            return 106;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2000000000008L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 19;
            return 106;
         }
         return -1;
      case 20:
         if ((active0 & 0x2000000000008L) != 0L)
            return 106;
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 39);
      case 46:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 61:
         return jjStopAtPos(0, 38);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x10020000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000000010004L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x80000000040002L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x30000000088c80L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000000800000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x400002c000008L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100220L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000000006100L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x400000002000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x50L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x300000040000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 56:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4a000000911240L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x58000000L);
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20040000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000006410L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x888a0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000002000002L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000400000L);
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 48, 106);
         return jjMoveStringLiteralDfa2_0(active0, 0x8L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20104L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000200000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 54:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 57:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000002000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 106);
         break;
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x810000L);
      case 109:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 106);
         return jjMoveStringLiteralDfa3_0(active0, 0x48000000000100L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L);
      case 115:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 2, 106);
         return jjMoveStringLiteralDfa3_0(active0, 0x310000040088890L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x7000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000400002L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x100200L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L);
      case 48:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 54:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 106);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 55:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 106);
         break;
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000001000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 106);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 106);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 105:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 106);
         return jjMoveStringLiteralDfa4_0(active0, 0x60000000020628L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000088080L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x80010000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x300000000000800L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 48:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 52:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 106);
         break;
      case 54:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100400L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 106);
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000800L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x228L);
      case 111:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 106);
         return jjMoveStringLiteralDfa5_0(active0, 0x16000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x310000000200002L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x480000080000010L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 52:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 106);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000800L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000002L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(5, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0x320000004040408L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000100080L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000080000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x6110L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x220L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 121:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x2L);
      case 107:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 109:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 106);
         else if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 106);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x9000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x310000000000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000040000L);
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 106);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000004000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000080000L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x88L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa8_0(active0, 0x14800L);
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0x220000000000000L);
      case 75:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L);
      case 98:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 106);
         break;
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L);
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 7, 106);
         return jjMoveStringLiteralDfa8_0(active0, 0x380010L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x40100L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000008000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000100L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000040000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000010000L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x210000000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x200008L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000008800L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000080000L);
      case 115:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 4, 106);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0xaL);
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000008000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x32000000004000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000100L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L);
      case 121:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 58, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x90000L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x100002L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(10, 18, 106);
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L);
      case 104:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 56, 106);
         break;
      case 109:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 53, 106);
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L);
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 52, 106);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000001800L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x8100L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L);
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000004000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L);
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(11, 8, 106);
         break;
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x802L);
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x202000000000000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x281000L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x14000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x800L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x8L);
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(12, 20, 106);
         break;
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x800L);
      case 100:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(13, 21);
         break;
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000010008L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000L);
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000000000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x2L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(13, 19, 106);
         break;
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa15_0(active0, 0x8L);
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000L);
      case 100:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(14, 16);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(14, 55);
         break;
      case 101:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(14, 1, 106);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 57, 106);
         break;
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x800L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(14, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000L);
      case 98:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000L);
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x8800L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(16, 11);
         break;
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x8L);
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000000L);
      case 112:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa19_0(active0, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000000000L);
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa20_0(active0, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x2000000008000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000L);
      case 114:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(20, 3, 106);
         return jjMoveStringLiteralDfa21_0(active0, 0x4000L);
      case 121:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 49, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa22_0(active0, 0x8000L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(21, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa23_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa24_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa25_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa26_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(26, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 107;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 107:
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(106);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(106);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(106);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(106);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAdd(4);
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(46);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(104);
                  }
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 41;
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(106);
                  break;
               case 1:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x3f000000000000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 3:
                  if ((0x100000200L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 4:
                  if ((0x2400L & l) == 0L)
                     break;
                  kind = 37;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 48 && kind > 40)
                     kind = 40;
                  break;
               case 6:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 41:
                  if (curChar == 50 && kind > 45)
                     kind = 45;
                  break;
               case 42:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 52 && kind > 45)
                     kind = 45;
                  break;
               case 44:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar != 35)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(46);
                  break;
               case 65:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 71:
                  if (curChar == 57 && kind > 40)
                     kind = 40;
                  break;
               case 72:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 79:
                  if (curChar == 47)
                     jjAddStates(0, 2);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(104);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(106);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 107:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(106);
                  }
                  if (curChar == 118)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(106);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 75;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(106);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(106);
                  }
                  if (curChar == 118)
                     jjAddStates(3, 5);
                  else if (curChar == 113)
                     jjAddStates(6, 8);
                  else if (curChar == 114)
                     jjAddStates(9, 10);
                  else if (curChar == 86)
                     jjAddStates(11, 12);
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 112)
                     jjCheckNAdd(10);
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(106);
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 9:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 118 && kind > 40)
                     kind = 40;
                  break;
               case 11:
               case 63:
                  if (curChar == 112)
                     jjCheckNAdd(10);
                  break;
               case 12:
                  if (curChar == 110 && kind > 40)
                     kind = 40;
                  break;
               case 13:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 69 && kind > 41)
                     kind = 41;
                  break;
               case 22:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 73 && kind > 41)
                     kind = 41;
                  break;
               case 25:
               case 53:
                  if (curChar == 83)
                     jjCheckNAdd(24);
                  break;
               case 26:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 115 && kind > 44)
                     kind = 44;
                  break;
               case 36:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 46:
                  if (kind > 61)
                     kind = 61;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if (curChar == 86)
                     jjAddStates(11, 12);
                  break;
               case 48:
                  if (curChar == 79 && kind > 41)
                     kind = 41;
                  break;
               case 49:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 54:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 114)
                     jjAddStates(9, 10);
                  break;
               case 64:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 69:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 75:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 113)
                     jjAddStates(6, 8);
                  break;
               case 78:
                  if (curChar == 108)
                     jjCheckNAdd(79);
                  break;
               case 80:
                  if (curChar == 108 && kind > 42)
                     kind = 42;
                  break;
               case 81:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 115 && kind > 42)
                     kind = 42;
                  break;
               case 84:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 97 && kind > 42)
                     kind = 42;
                  break;
               case 90:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 93:
                  if (curChar == 108 && kind > 43)
                     kind = 43;
                  break;
               case 94:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 108 && kind > 44)
                     kind = 44;
                  break;
               case 96:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 118)
                     jjAddStates(3, 5);
                  break;
               case 98:
                  if (curChar == 99)
                     jjCheckNAdd(79);
                  break;
               case 99:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 99 && kind > 43)
                     kind = 43;
                  break;
               case 101:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 97 && kind > 44)
                     kind = 44;
                  break;
               case 103:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 105:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(106);
                  break;
               case 106:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(106);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 107 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0x2400L & l) == 0L)
                     break;
                  kind = 37;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 36;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 36)
                     kind = 36;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 46:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_1(0x80000000L);
      case 61:
         return jjStopAtPos(0, 35);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(5, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  else if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x3f000000000000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 3:
                  if ((0x100000200L & l) != 0L)
                     kind = 34;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   82, 88, 91, 99, 101, 103, 92, 94, 96, 70, 76, 52, 61, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\143\160\165\101\162\143\150\151\164\145\143\164\165\162\145", 
"\142\165\163", 
"\151\163\124\151\155\145\172\157\156\145\124\171\160\145\111\156\164\145\147\145\162", "\162\145\163\157\165\162\143\145\163", "\155\151\156\151\155\165\155", 
"\162\141\155", "\144\151\163\153\163\151\172\145", 
"\156\165\155\142\145\162\117\146\103\160\165\163", "\155\141\170\151\155\165\155", "\144\145\166\151\143\145\163", 
"\144\151\163\160\154\141\171\56\160\162\157\164\157\143\157\154\163", "\167\141\164\143\150\144\157\147\56\155\157\144\145\154\163", 
"\156\145\164\167\157\162\153", 
"\156\145\164\167\157\162\153\56\150\157\164\160\154\165\147\123\165\160\160\157\162\164", 
"\144\151\163\153\56\150\157\164\160\154\165\147\147\141\142\154\145\111\156\164\145\162\146\141\143\145\163", "\142\141\154\154\157\157\156\56\145\156\141\142\154\145\144", 
"\141\165\144\151\157", "\143\144\111\156\164\145\162\146\141\143\145", 
"\144\151\163\153\111\156\164\145\162\146\141\143\145\163", "\155\141\170\120\143\151\104\145\166\151\143\145\163", 
"\150\171\160\145\162\166\56\145\156\141\142\154\145\144", "\164\162\165\145", "\146\141\154\163\145", "\170\70\66\137\66\64", 
"\160\160\143\66\64", "\151\66\63\60\60\145\163\142", "\151\143\150\66", "\141\143\71\67", 
"\151\144\145", "\163\143\163\151", "\56\166\141\154\165\145", "\56", null, null, "\75", null, 
null, "\75", "\54", null, null, null, null, null, null, null, null, "\157\163", 
"\142\141\143\153\167\141\162\144\103\157\155\160\141\164\151\142\151\154\151\164\171", "\151\144", "\156\141\155\145", 
"\144\145\163\143\162\151\160\164\151\157\156", "\144\145\162\151\166\145\144\106\162\157\155", "\146\141\155\151\154\171", 
"\143\160\165\56\165\156\163\165\160\160\157\162\164\145\144", "\163\171\163\160\162\145\160\120\141\164\150", 
"\163\171\163\160\162\145\160\106\151\154\145\116\141\155\145", "\160\162\157\144\165\143\164\113\145\171", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "STRING_VALUE",
   "STRING_LITERAL",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3fffffefffffffffL, 
};
static final long[] jjtoSkip = {
   0x1000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[107];
private final int[] jjstateSet = new int[214];
protected char curChar;
/** Constructor. */
public OsInfoParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public OsInfoParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 107; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
